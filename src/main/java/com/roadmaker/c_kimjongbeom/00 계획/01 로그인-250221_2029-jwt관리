JWT Access 토큰은 클라이언트 측 쿠키에 저장하고, Refresh 토큰은 서버 측 데이터베이스에 저장하여 관리하는 방식으로 진행됩니다. 이를 통해 액세스 토큰의 만료 시간을 짧게 설정하여 보안성을 높이고, 만료된 액세스 토큰을 갱신할 때 리프레시 토큰을 통해 새로운 액세스 토큰을 발급받을 수 있습니다.

목적과 방향성
JWT Access Token:

클라이언트가 API 요청을 보낼 때마다 Access Token을 Authorization 헤더에 포함시켜 보냅니다.
Access Token의 만료시간을 짧게 설정하여 보안성을 강화합니다.
만료된 Access Token을 갱신하기 위해서는 서버 측에 저장된 Refresh Token을 사용합니다.
JWT Refresh Token:

서버에서 Refresh Token을 관리하고, 클라이언트는 Refresh Token을 쿠키나 다른 저장소에 보관할 수 있습니다.
클라이언트는 만료된 Access Token을 재발급 받기 위해 Refresh Token을 서버에 전달하고, 서버는 새로운 Access Token과 Refresh Token을 발급하여 클라이언트에게 반환합니다.
클라이언트 측에서의 처리:

Access Token은 쿠키에 저장하여, HTTP 요청마다 자동으로 첨부됩니다.
Refresh Token은 보안상의 이유로 서버에서 관리합니다. 만약 Refresh Token도 만료되면, 사용자는 다시 로그인을 해야 합니다.
프로세스 설명
회원가입:

클라이언트가 회원가입 요청을 보내면, 회원 정보가 데이터베이스에 저장되고 비밀번호는 암호화되어 저장됩니다.
회원가입 후 JWT 토큰을 생성하고 클라이언트에게 반환할 수 있습니다.
로그인:

클라이언트는 이메일과 비밀번호를 사용하여 로그인 요청을 합니다.
로그인 시 비밀번호가 맞으면 서버는 Access Token과 Refresh Token을 생성하여 응답합니다.
Access Token은 쿠키에 저장하고 Refresh Token은 데이터베이스에 저장됩니다.
로그아웃:

로그아웃 요청을 받으면 서버는 쿠키에서 Access Token을 제거하고, Refresh Token을 삭제합니다.
Token 갱신:

Access Token이 만료되면 클라이언트는 저장된 Refresh Token을 이용해 새로운 Access Token을 발급받습니다.
파일 구조 및 경로 설명
markdown
복사
- src/
    - main/
        - java/
            - com/
                - roadmaker/
                    - a_common/
                        - config/
                            - SecurityConfig.java        // Spring Security 설정, JWT 토큰 필터링 처리
                        - security/
                            - JwtRequestFilter.java       // JWT 필터, 인증 처리
                            - JwtUtil.java               // JWT 유틸리티 (토큰 생성 및 검증)
                    - c_kimjongbeom/
                        - controller/
                            - AuthController.java        // 로그인, 회원가입, 로그아웃 등 API 처리
                        - dto/
                            - MembersDTO.java            // 회원 정보 모델
                        - service/
                            - MemberService.java         // 회원 서비스 인터페이스
                            - MemberServiceImpl.java     // 회원 서비스 구현체
                            - MyUserDetailService.java   // 사용자 인증 서비스
                        - mapper/
                            - MemberMapper.java          // MyBatis 매퍼, DB 쿼리 실행
코드 구현
JwtUtil.java (JWT 생성 및 검증 유틸리티)
java
복사
package com.roadmaker.a_common.security;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import java.util.Date;
import org.springframework.stereotype.Component;

@Component
public class JwtUtil {

    private String secretKey = "your_secret_key"; // 실제 환경에서는 안전한 비밀 키 사용

    // Access Token 생성
    public String generateAccessToken(String email) {
        return Jwts.builder()
                .setSubject(email)
                .setIssuedAt(new Date())
                .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 15)) // 15분 만료
                .signWith(SignatureAlgorithm.HS256, secretKey)
                .compact();
    }

    // Refresh Token 생성
    public String generateRefreshToken(String email) {
        return Jwts.builder()
                .setSubject(email)
                .setIssuedAt(new Date())
                .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 60 * 24)) // 24시간 만료
                .signWith(SignatureAlgorithm.HS256, secretKey)
                .compact();
    }

    // 토큰에서 이메일 추출
    public String extractEmail(String token) {
        return Jwts.parser()
                .setSigningKey(secretKey)
                .parseClaimsJws(token)
                .getBody()
                .getSubject();
    }

    // 토큰 검증
    public boolean validateToken(String token) {
        try {
            Jwts.parser().setSigningKey(secretKey).parseClaimsJws(token);
            return true;
        } catch (Exception e) {
            return false;
        }
    }
}
SecurityConfig.java (Spring Security 설정)
java
복사
package com.roadmaker.a_common.config;

import com.roadmaker.a_common.security.JwtRequestFilter;
import com.roadmaker.a_common.security.JwtUtil;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

@Configuration
public class SecurityConfig {

    private final JwtRequestFilter jwtRequestFilter;
    private final JwtUtil jwtUtil;

    public SecurityConfig(JwtRequestFilter jwtRequestFilter, JwtUtil jwtUtil) {
        this.jwtRequestFilter = jwtRequestFilter;
        this.jwtUtil = jwtUtil;
    }

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
            .cors().and()
            .csrf().disable()
            .authorizeRequests()
            .antMatchers("/api/login", "/api/signup").permitAll() // 로그인, 회원가입은 인증 없이 접근 가능
            .anyRequest().authenticated()
            .and()
            .addFilterBefore(jwtRequestFilter, UsernamePasswordAuthenticationFilter.class);

        return http.build();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}
AuthController.java (로그인, 회원가입, 로그아웃 API)
java
복사
package com.roadmaker.c_kimjongbeom.controller;

import com.roadmaker.a_common.security.JwtUtil;
import com.roadmaker.c_kimjongbeom.dto.MembersDTO;
import com.roadmaker.c_kimjongbeom.service.MemberService;
import com.roadmaker.f_hwangjinsang.dto.DataDTO;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.bind.annotation.*;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletResponse;

@RestController
@RequestMapping("/api")
public class AuthController {

    private final MemberService memberService;
    private final JwtUtil jwtUtil;

    @Autowired
    public AuthController(MemberService memberService, JwtUtil jwtUtil) {
        this.memberService = memberService;
        this.jwtUtil = jwtUtil;
    }

    @PostMapping("login")
    public DataDTO login(@RequestBody MembersDTO mdto, HttpServletResponse response) {
        DataDTO responseDTO = new DataDTO();
        try {
            UserDetails userDetails = memberService.loadUserByUsername(mdto.getMemEmail());
            if (userDetails != null && jwtUtil.validateToken(mdto.getMemSecret())) {
                String accessToken = jwtUtil.generateAccessToken(userDetails.getUsername());
                String refreshToken = jwtUtil.generateRefreshToken(userDetails.getUsername());
                memberService.saveRefreshToken(userDetails.getUsername(), refreshToken, new Date(System.currentTimeMillis() + 1000 * 60 * 60 * 24)); // Refresh Token DB에 저장

                Cookie cookie = new Cookie("accessToken", accessToken);
                cookie.setHttpOnly(true);
                cookie.setMaxAge(60 * 15); // 15분

                response.addCookie(cookie);

                responseDTO.setSuccess(true);
                responseDTO.setMessage("로그인 성공");
            } else {
                responseDTO.setSuccess(false);
                responseDTO.setMessage("로그인 실패");
            }
        } catch (Exception e) {
            responseDTO.setSuccess(false);
            responseDTO.setMessage("로그인 실패: " + e.getMessage());
        }
        return responseDTO;
    }

    // 다른 메서드들...
}
핵심 흐름
로그인 시 Access Token은 쿠키에 저장되고, Refresh Token은 DB에 저장됩니다.
Access Token이 만료되면 Refresh Token을 사용하여 새로운 Access Token을 발급합니다.
로그아웃 시 Refresh Token은 삭제되고, Access Token 쿠키는 삭제됩니다.